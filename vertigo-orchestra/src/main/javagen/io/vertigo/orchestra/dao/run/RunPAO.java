package io.vertigo.orchestra.dao.run;

import javax.inject.Inject;

import java.util.Optional;
import io.vertigo.app.Home;
import io.vertigo.dynamo.task.TaskManager;
import io.vertigo.dynamo.task.metamodel.TaskDefinition;
import io.vertigo.dynamo.task.model.Task;
import io.vertigo.dynamo.task.model.TaskBuilder;
import io.vertigo.dynamo.store.StoreServices;
import io.vertigo.lang.Assertion;
import io.vertigo.lang.Generated;

/**
 * This class is automatically generated.
 * DO NOT EDIT THIS FILE DIRECTLY.
 */
 @Generated
public final class RunPAO implements StoreServices {
	private final TaskManager taskManager;

	/**
	 * Constructeur.
	 * @param taskManager Manager des Task
	 */
	@Inject
	public RunPAO(final TaskManager taskManager) {
		Assertion.checkNotNull(taskManager);
		//-----
		this.taskManager = taskManager;
	}

	/**
	 * Creates a taskBuilder.
	 * @param name  the name of the task
	 * @return the builder 
	 */
	private static TaskBuilder createTaskBuilder(final String name) {
		final TaskDefinition taskDefinition = Home.getApp().getDefinitionSpace().resolve(name, TaskDefinition.class);
		return Task.builder(taskDefinition);
	}

	/**
	 * Execute la tache TK_DELETE_JOB_RUNNING.
	 * @param jobId String 
	 * @param nodeId Long 
	 * @param execDate java.time.ZonedDateTime 
	 * @return Integer intSqlRowcount
	*/
	public Integer deleteJobRunning(final String jobId, final Long nodeId, final java.time.ZonedDateTime execDate) {
		final Task task = createTaskBuilder("TK_DELETE_JOB_RUNNING")
				.addValue("JOB_ID", jobId)
				.addValue("NODE_ID", nodeId)
				.addValue("EXEC_DATE", execDate)
				.build();
		return getTaskManager()
				.execute(task)
				.getResult();
	}

	/**
	 * Execute la tache TK_INSERT_JOB_BOARD_TO_LAUNCH.
	 * @param jobBoard io.vertigo.orchestra.domain.run.OJobRun 
	*/
	public void insertJobBoardToLaunch(final io.vertigo.orchestra.domain.run.OJobRun jobBoard) {
		final Task task = createTaskBuilder("TK_INSERT_JOB_BOARD_TO_LAUNCH")
				.addValue("JOB_BOARD", jobBoard)
				.build();
		getTaskManager().execute(task);
	}

	/**
	 * Execute la tache TK_INSERT_JOB_RUNNING_TO_LAUNCH.
	 * @param nodeId Long 
	 * @param execDate java.time.ZonedDateTime 
	 * @param usrId Long (peut Ãªtre null)
	 * @param processesNextRun io.vertigo.orchestra.domain.schedule.OProcessNextRun 
	 * @return Integer intSqlRowcount
	*/
	public Integer insertJobRunningToLaunch(final Long nodeId, final java.time.ZonedDateTime execDate, final Optional<Long> usrId, final io.vertigo.orchestra.domain.schedule.OProcessNextRun processesNextRun) {
		final Task task = createTaskBuilder("TK_INSERT_JOB_RUNNING_TO_LAUNCH")
				.addValue("NODE_ID", nodeId)
				.addValue("EXEC_DATE", execDate)
				.addValue("USR_ID", usrId.orElse(null))
				.addValue("PROCESSES_NEXT_RUN", processesNextRun)
				.build();
		return getTaskManager()
				.execute(task)
				.getResult();
	}

	private TaskManager getTaskManager() {
		return taskManager;
	}
}
