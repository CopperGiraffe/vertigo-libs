package io.vertigo.orchestra.domain;

import java.util.Arrays;
import java.util.Iterator;

import io.vertigo.dynamo.domain.metamodel.DtFieldName;
import io.vertigo.lang.Generated;

/**
 * This class is automatically generated.
 * DO NOT EDIT THIS FILE DIRECTLY.
 */
@Generated
public final class DtDefinitions implements Iterable<Class<?>> {

	/**
	 * Enumération des DtDefinitions.
	 */
	public enum Definitions {
		/** Objet de données OJobCron. */
		OJobCron(io.vertigo.orchestra.domain.schedule.OJobCron.class),
		/** Objet de données OJobExec. */
		OJobExec(io.vertigo.orchestra.domain.run.OJobExec.class),
		/** Objet de données OJobExecution. */
		OJobExecution(io.vertigo.orchestra.domain.history.OJobExecution.class),
		/** Objet de données OJobLog. */
		OJobLog(io.vertigo.orchestra.domain.history.OJobLog.class),
		/** Objet de données OJobModel. */
		OJobModel(io.vertigo.orchestra.domain.model.OJobModel.class),
		/** Objet de données OJobRun. */
		OJobRun(io.vertigo.orchestra.domain.run.OJobRun.class),
		/** Objet de données OJobSchedule. */
		OJobSchedule(io.vertigo.orchestra.domain.schedule.OJobSchedule.class),
		/** Objet de données OProcessNextRun. */
		OProcessNextRun(io.vertigo.orchestra.domain.schedule.OProcessNextRun.class),
		/** Objet de données OUser. */
		OUser(io.vertigo.orchestra.domain.referential.OUser.class)		;

		private final Class<?> clazz;

		private Definitions(final Class<?> clazz) {
			this.clazz = clazz;
		}

		/** 
		 * Classe associée.
		 * @return Class d'implémentation de l'objet 
		 */
		public Class<?> getDtClass() {
			return clazz;
		}
	}

	/**
	 * Enumération des champs de OJobCron.
	 */
	public enum OJobCronFields implements DtFieldName<io.vertigo.orchestra.domain.schedule.OJobCron> {
		/** Propriété 'id'. */
		JCR_ID,
		/** Propriété 'cron expression'. */
		CRON_EXPRESSION,
		/** Propriété 'init params as JSON'. */
		PARAMS,
		/** Propriété 'JobModel'. */
		JMO_ID	}

	/**
	 * Enumération des champs de OJobExec.
	 */
	public enum OJobExecFields implements DtFieldName<io.vertigo.orchestra.domain.run.OJobExec> {
		/** Propriété 'Id'. */
		JID,
		/** Propriété 'Job Name'. */
		JOB_NAME,
		/** Propriété 'Node Id'. */
		NODE_ID,
		/** Propriété 'Start exec date'. */
		START_EXEC_DATE,
		/** Propriété 'Max date Max execution (start + timeout)'. */
		MAX_EXEC_DATE,
		/** Propriété 'User'. */
		USR_ID	}

	/**
	 * Enumération des champs de OJobExecution.
	 */
	public enum OJobExecutionFields implements DtFieldName<io.vertigo.orchestra.domain.history.OJobExecution> {
		/** Propriété 'Id d'une trace d'execution d'un job'. */
		JEX_ID,
		/** Propriété 'Status général d'execution'. */
		JOB_NAME,
		/** Propriété 'Status général d'execution'. */
		STATUS,
		/** Propriété 'Code d'erreur fonctionel de l'execution'. */
		REASON,
		/** Propriété 'Date de début d'execution'. */
		DATE_DEBUT,
		/** Propriété 'Date de fin d'execution'. */
		DATE_FIN,
		/** Propriété 'Implémentation effective de l'execution'. */
		CLASS_ENGINE,
		/** Propriété 'Workspace d'entrée de l'execution'. */
		WORKSPACE_IN,
		/** Propriété 'Workspace de sortie de l'execution'. */
		WORKSPACE_OUT,
		/** Propriété 'Id du noeud'. */
		NOD_ID	}

	/**
	 * Enumération des champs de OJobLog.
	 */
	public enum OJobLogFields implements DtFieldName<io.vertigo.orchestra.domain.history.OJobLog> {
		/** Propriété 'Id d'une trace d'execution d'un job'. */
		JLO_ID,
		/** Propriété 'Date de la trace'. */
		DATE_TRACE,
		/** Propriété 'Niveau de la trace'. */
		LEVEL,
		/** Propriété 'Type de trace'. */
		TYPE_EXEC_CD,
		/** Propriété 'Message'. */
		MESSAGE,
		/** Propriété 'Paramètre'. */
		PARAMETRE,
		/** Propriété 'Stacktrace d'erreur'. */
		ERREUR,
		/** Propriété 'JobExecution'. */
		PRO_ID	}

	/**
	 * Enumération des champs de OJobModel.
	 */
	public enum OJobModelFields implements DtFieldName<io.vertigo.orchestra.domain.model.OJobModel> {
		/** Propriété 'Id'. */
		JMO_ID,
		/** Propriété 'Name'. */
		JOB_NAME,
		/** Propriété 'Description'. */
		DESC,
		/** Propriété 'Class name of the Job'. */
		JOB_ENGINE_CLASS_NAME,
		/** Propriété 'Max retry limit'. */
		MAX_RETRY,
		/** Propriété 'Max delay in seconds of a run from its scheduled date'. */
		RUN_MAX_DELAY,
		/** Propriété 'Timeout in seconds of a single execution'. */
		EXEC_TIMEOUT,
		/** Propriété 'Creation date'. */
		CREATION_DATE,
		/** Propriété 'Active/Inactive'. */
		ACTIVE	}

	/**
	 * Enumération des champs de OJobRun.
	 */
	public enum OJobRunFields implements DtFieldName<io.vertigo.orchestra.domain.run.OJobRun> {
		/** Propriété 'Id'. */
		JID,
		/** Propriété 'Exec status'. */
		STATUS,
		/** Propriété 'Node Id'. */
		NODE_ID,
		/** Propriété 'Max date of the run'. */
		MAX_DATE,
		/** Propriété 'Max retry'. */
		MAX_RETRY,
		/** Propriété 'Current try'. */
		CURRENT_TRY	}

	/**
	 * Enumération des champs de OJobSchedule.
	 */
	public enum OJobScheduleFields implements DtFieldName<io.vertigo.orchestra.domain.schedule.OJobSchedule> {
		/** Propriété 'id'. */
		JSC_ID,
		/** Propriété 'schedule date'. */
		SCHEDULE_DATE,
		/** Propriété 'init params as JSON'. */
		PARAMS,
		/** Propriété 'JobModel'. */
		JMO_ID	}

	/**
	 * Enumération des champs de OProcessNextRun.
	 */
	public enum OProcessNextRunFields implements DtFieldName<io.vertigo.orchestra.domain.schedule.OProcessNextRun> {
		/** Propriété 'Nom du job'. */
		JOBNAME,
		/** Propriété 'Job Id'. */
		JOB_ID,
		/** Propriété 'Date d'execution prévue'. */
		EXPECTED_TIME,
		/** Propriété 'Paramètres initiaux sous forme de JSON'. */
		INITIAL_PARAMS	}

	/**
	 * Enumération des champs de OUser.
	 */
	public enum OUserFields implements DtFieldName<io.vertigo.orchestra.domain.referential.OUser> {
		/** Propriété 'Id'. */
		USR_ID,
		/** Propriété 'Nom'. */
		FIRST_NAME,
		/** Propriété 'Prénom'. */
		LAST_NAME,
		/** Propriété 'Email'. */
		EMAIL,
		/** Propriété 'Mot de passe'. */
		PASSWORD,
		/** Propriété 'Alerté en cas d'erreur'. */
		MAIL_ALERT,
		/** Propriété 'Compte Actif'. */
		ACTIVE	}

	/** {@inheritDoc} */
	@Override
	public Iterator<Class<?>> iterator() {
		return new Iterator<Class<?>>() {
			private Iterator<Definitions> it = Arrays.asList(Definitions.values()).iterator();

			/** {@inheritDoc} */
			@Override
			public boolean hasNext() {
				return it.hasNext();
			}

			/** {@inheritDoc} */
			@Override
			public Class<?> next() {
				return it.next().getDtClass();
			}
		};
	}
}
