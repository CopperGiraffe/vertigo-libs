package ${packageName};

import java.util.Arrays;

import javax.inject.Inject;

import io.vertigo.commons.transaction.VTransactionManager;
import io.vertigo.core.lang.Generated;
import io.vertigo.core.node.Home;
import io.vertigo.core.node.component.Component;
import io.vertigo.core.util.InjectorUtil;
import io.vertigo.datafactory.collections.ListFilter;
import io.vertigo.datafactory.collections.metamodel.FacetedQueryDefinition;
import io.vertigo.datafactory.collections.metamodel.ListFilterBuilder;
import io.vertigo.datafactory.collections.model.FacetedQueryResult;
import io.vertigo.datafactory.collections.model.SelectedFacetValues;
import io.vertigo.datafactory.search.SearchManager;
import io.vertigo.datafactory.search.metamodel.SearchIndexDefinition;
import io.vertigo.datafactory.search.model.SearchQuery;
import io.vertigo.datafactory.search.model.SearchQueryBuilder;
import io.vertigo.datamodel.structure.model.DtListState;
import io.vertigo.datamodel.structure.model.UID;
<#if indexDtDefinition.classCanonicalName != dtDefinition.classCanonicalName >
import ${indexDtDefinition.classCanonicalName};
</#if>
import ${dtDefinition.classCanonicalName};


/**
 * This class is automatically generated.
 * DO NOT EDIT THIS FILE DIRECTLY.
 */
@Generated
@io.vertigo.datafactory.search.metamodel.annotation.SearchIndexAnnotation(name = "${searchIndexDefinition.name}", dtIndex = "${searchIndexDefinition.indexDtDefinition}", keyConcept = "${searchIndexDefinition.keyConceptDtDefinition}", loaderId = "${searchIndexDefinition.loaderId}")
<#list searchIndexDefinition.copyToModels as copyTo>
@io.vertigo.datafactory.search.metamodel.annotation.IndexCopyTo(field = "${copyTo.from}", to = {<#list copyTo.to as to>"${to}"<#sep>, </#list>})
</#list>
public final class ${dtDefinition.classSimpleName}SearchClient implements Component {

	private final SearchManager searchManager;
	private final VTransactionManager transactionManager;

	/**
	 * Contructeur.
	 * @param searchManager Search Manager
	 * @param transactionManager Transaction Manager
	 */
	@Inject
	public ${dtDefinition.classSimpleName}SearchClient(final SearchManager searchManager, final VTransactionManager transactionManager) {
		this.searchManager = searchManager;
		this.transactionManager = transactionManager;
	}

	<#list facetedQueryDefinitions as facetedQueryDefinition>
	/**
	 * Création d'une SearchQuery de type : ${facetedQueryDefinition.simpleName}.
	 * @param criteria Critères de recherche
	 * @param selectedFacetValues Liste des facettes sélectionnées à appliquer
	 * @return SearchQueryBuilder pour ce type de recherche
	 */
	@io.vertigo.datafactory.search.metamodel.annotation.FacetedQueryAnnotation(
		name = "${facetedQueryDefinition.queryName}",
		keyConcept = "${facetedQueryDefinition.keyConceptDtDefinition}",
		listFilterBuilderClass = ${facetedQueryDefinition.listFilterClassName}.class,
		listFilterBuilderQuery = "${facetedQueryDefinition.listFilterBuilderQuery}",
		criteriaSmartType = "${facetedQueryDefinition.criteriaSmartType}",
		facets = {
	<#list facetedQueryDefinition.facetDefinitions as facetDefinition>
			@io.vertigo.datafactory.search.metamodel.annotation.Facet(
				type = "<#if facetDefinition.isRange()>range<#else>term</#if>",
				name = "${facetDefinition.name}$${facetedQueryDefinition.queryName?uncap_first}",
				dtDefinition = "${searchIndexDefinition.indexDtDefinition}",
				fieldName = "${facetDefinition.fieldName}",
				label = "${facetDefinition.label}",
				<#if facetDefinition.isMultiSelectable()>
				multiselectable = true,
				</#if>
				<#if facetDefinition.isRange()>
				ranges = {
					<#list facetDefinition.facetValues as facetValue>@io.vertigo.datafactory.search.metamodel.annotation.Range(code = "${facetValue.code}", filter = "${facetValue.listFilter}", label = "${facetValue.label}")<#sep>,
					</#list>},
				</#if>
				order = io.vertigo.datafactory.collections.metamodel.FacetDefinition.FacetOrder.${facetDefinition.order})<#sep>,
	</#list>
		})
	public SearchQueryBuilder createSearchQueryBuilder${facetedQueryDefinition.simpleName}(final ${facetedQueryDefinition.criteriaClassCanonicalName} criteria, final SelectedFacetValues selectedFacetValues) {
		final FacetedQueryDefinition facetedQueryDefinition = Home.getApp().getDefinitionSpace().resolve("${facetedQueryDefinition.queryName}", FacetedQueryDefinition.class);
		final ListFilterBuilder<${facetedQueryDefinition.criteriaClassCanonicalName}> listFilterBuilder = InjectorUtil.newInstance(facetedQueryDefinition.getListFilterBuilderClass());
		final ListFilter criteriaListFilter = listFilterBuilder.withBuildQuery(facetedQueryDefinition.getListFilterBuilderQuery()).withCriteria(criteria).build();
		return SearchQuery.builder(criteriaListFilter).withFacet(facetedQueryDefinition, selectedFacetValues);
	}
	</#list>

	/**
	 * Récupération du résultat issu d'une requête.
	 * @param searchQuery critères initiaux
	 * @param listState Etat de la liste (tri et pagination)
	 * @return Résultat correspondant à la requête (de type ${indexDtDefinition.classSimpleName})
	 */
	public FacetedQueryResult<${indexDtDefinition.classSimpleName}, SearchQuery> loadList(final SearchQuery searchQuery, final DtListState listState) {
		final SearchIndexDefinition indexDefinition = searchManager.findFirstIndexDefinitionByKeyConcept(${dtDefinition.classSimpleName}.class);
		return searchManager.loadList(indexDefinition, searchQuery, listState);
	}

	/**
	 * Mark an entity as dirty. Index of these elements will be reindexed if Tx commited.
	 * Reindexation isn't synchrone, strategy is dependant of plugin's parameters.
	 *
	 * @param entityUID Key concept's UID
	 */
	public void markAsDirty(final UID<${dtDefinition.classSimpleName}> entityUID) {
		transactionManager.getCurrentTransaction().addAfterCompletion((final boolean txCommitted) -> {
			if (txCommitted) {// reindex only is tx successful
				searchManager.markAsDirty(Arrays.asList(entityUID));
			}
		});
	}

	/**
	 * Mark an entity as dirty. Index of these elements will be reindexed if Tx commited.
	 * Reindexation isn't synchrone, strategy is dependant of plugin's parameters.
	 *
	 * @param entity Key concept
	 */
	public void markAsDirty(final ${dtDefinition.classSimpleName} entity) {
		markAsDirty(UID.of(entity));
	}
}
